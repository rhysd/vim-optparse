*vim-optparse.txt*                                Option parser library for Vim.

Author : rhysd <lin90162@yahoo.co.jp>

CONTENTS         *optparse-contents*

Introduction              |optparse-introduction|
Usage                     |optparse-usage|
Install                   |optparse-install|
Functions                 |optparse-functions|
OptionParser Interface    |optparse-option-parser-interface|
  - Special Options       |optparse-option-parser-interface-special-options|
Repository Page           |optparse-repository-page|
License                   |optparse-license|

==============================================================================
INTRODUCTION                                             *optparse-introduction*

*optparse* is an option parser library for Vim script.
It can parse key-value style options(like --foo=bar) in Vim commands and
|:command| attributes like <count>, <bang>, <range> and so on.
A great advantage of key-value type options is that you need not take care of
the order of options.
Now, this library is included in |vital.vim|.  I recommend using it because
there are other useful libraries in it.

https://github.com/vim-jp/vital.vim


==============================================================================
USAGE                                                           *optparse-usage*

At first, make new instance of a parser with |optparse#new()|, then define
options you want to parse with |OptionParser.on()|.  At last, define command
with |OptionParser.parse()|.
This library's interface is inspired by OptionParser in Ruby.
>
  " make option parser instance
  let s:opt = optparse#new()

  " define option
  call s:opt.on('--hoge=VALUE', 'description of hoge, must have value')
  call s:opt.on('--foo', 'description of foo')
  " definitions can chain
  call s:opt.on('--[no-]bar', 'description of bar, contradictable')
           \.on('--baz', 'description of baz, has short option', {'short' : '-b'})
           \.on('--qux', 'description of qux, defaults to "aaa"', {'default' : 'aaa'})

  " define command with the parser
  command! -nargs=* -count -bang Hoge echo s:opt.parse(<q-args>, <count>, <q-bang>)

  " execute!
  Hoge! --hoge=huga --no-bar poyo -b
  " => {
  "      '__count__' : 0,
  "      '__bang__' : '!',
  "      'hoge' : 'huga',
  "      'bar' : 0,
  "      'baz' : 1,
  "      'qux' : 'aaa',
  "      '__unknown_args__' : ['poyo'],
  "    }

  " show help
  Hoge --help
  " echo following message
  "   Options:
  "     --hoge=VALUE : description of hoge, must have value
  "     --foo        : description of foo
  "     --[no-]bar   : description of bar, contradictable
  "     --baz, -b    : description of baz, has short option
  "     --qux        : description of qux, defaults to "aaa" (DEFAULT: 'aaa')
  "
  " => {
  "      '__count__' : 0,
  "      'help' : 1,
  "    }
<

==============================================================================
INSTALL                                                       *optparse-install*

Using Vim plugin package manager is recommended.  I use |neobundle| and |vundle|
seems the most famous.
If you want to install manually, it is not recommended, copy files and
directories in autoload/ directory to your vim config directory.  Vim config
directory is usually $HOME/vimfiles on Windows or ~/.vim in other operating
systems.

If you want to bundle |optparse| in Vim plugins, copy files as below and fix
autoload functions' names in autoload/*.
>
  optparse/autoload/optparse.vim -> your_plugin/autoload/your_plugin/optparse.vim
  optparse/autoload/optparse/* -> your_plugin/autoload/your_plugin/optparse/*
<
In this case, write below copyright notice and permission notice to
documentation of your plugin following MIT license.


==============================================================================
FUNCTIONS                                                   *optparse-functions*

optparse#new()                                                  *optparse#new()*

    Make an option parser instance.  It returns |Dictionary| which is like an
    object in OOP.  You can define options in this instance and parse
    arguments with this instance.


==============================================================================
OPTION PARSER INTERFACE                       *optparse-option-parser-interface*

OptionParser.on({name}, {description} [, {extra}])          *OptionParser.on()*

    Define a option to parse.  You should call this function every option.

      - {name} (required)
        |String| value.  A name of option.
        {name} can be one of the below patterns.  foo is an example of option
        name.

          - "--foo"
            Option whose name is "foo".  If it is used with value like
            "--foo=huga", value of "foo" will be "huga".  If a value is
            omitted,  value of "foo" will be 1.

          - "--foo=VALUE"
            Option whose name is "foo" and it must have a value with
            "--foo=hoge" style.  In that case, Value of "foo" will be "hoge".
            Name of value, VALUE is only an example of names.  It can be any
            names.  If a value is omitted, it occurs an error.

          - "--[no-]foo"
            Option whose name is "foo" and it is deniable with "no-" prefix.
            When it is used like "--no-foo", value of "foo" will be 0.

      - {description} (required)
        |String| value.  Description of option.  This is used for "--help"
        argument.

      - {extra} (optional)
        |Dictionary| value.  It has "short", "default" or "completion" key to
        define additional behavior of the option.

        - "short"
          Value of "short" key defines abbreviation of the option.  This is an
          alias of {name}.  It must starts with "-" and one alphabet must
          follow it like "-f".

        - "default"
          Value of "default" key defines the default value when the option is
          omitted.

OptionParser.parse({q-args} [, {cmd-attributes}...])      *OptionParser.parse()*

    Parse command options.
    {q-args} is |String| value and you must pass <q-arg> to this argument.
    {cmd-attributes} are command attributes like <range>, <count>, <bang> and
    so on.  You need not take care of the order of attributes.  Arguments not
    parsed result in "__unknown_args__" key's value as |List| of |String|.

      - {range}
        You must use |List| of <line1> and <line2>.
        The result is "__range__" key's value as |List| of |Number|.

      - {count}
        You must use <count>.
        The result is "__count__" key's value as |Number|.

      - {bang}
        You must use <q-bang>.
        The result is "__bang__" key's value as |String|, "!".

      - {reg}
        You must use <reg> or <register>.
        The result is "__reg__" key's value as |String|.
>
    command! -range -bang -register Hoge
        \ echo OptionParser.parse(<q-args>, [<line1>, <line2>], <q-bang>, <reg>)
<
OptionParser.help()                                        *OptionParser.help()*

    Make output for --help option and return it as |String|.

------------------------------------------------------------------------------
SPECIAL OPTIONS               *optparse-option-parser-interface-special-options*

    "--help" option is a special option which is available in all commands
    parsed by |optparse|.  If "--help" echos usage of the command.  Below is
    an output example.
>
   Options:
     --hoge=VALUE : description of hoge, must have value
     --foo        : description of foo
     --[no-]bar   : description of bar, deniable
     --baz, -b    : description of baz, has short option
     --qux        : description of qux, defaults to "aaa" (DEFAULT: 'aaa')
<
    If you don't want to use "--help", set OptionParser.disable_auto_help to 1.
>
    let s:O = optparse#new()
    let s:O.disable_auto_help = 1
<

==============================================================================
REPOSITORY PAGE                                       *optparse-repository-page*

The latest version of |optparse| is available at
https://github.com/rhysd/vim-optparse

Contributions (pull requests) are welcome.  None of them are too short.
Especially, English check is very helpful because I'm poor at English :(


==============================================================================
LICENSE                                                       *optparse-license*

|optparse| is distributed under MIT license.

  Copyright (c) 2013-2014 rhysd

  Permission is hereby granted, free of charge, to any person obtaining
  a copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sublicense, and/or sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


==============================================================================
vim:tw=78:colorcolumn=78:ts=8:ft=help:norl:et:fen:fdl=0:
